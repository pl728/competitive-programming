type: codeforces
files:
- name: testData/1/input.txt
  visible: true
  text: |-
    4
    3
    -1 0 1
    5
    1 -2 -2 1 -3
    6
    0 0 0 0 0 0
    4
    -1 2 -3 4
  learner_created: false
- name: testData/1/output.txt
  visible: true
  text: |-
    YES
    NO
    YES
    NO
  learner_created: false
- name: src/Main.java
  visible: true
  text: |
    import java.io.BufferedReader;
    import java.io.IOException;
    import java.io.InputStreamReader;
    import java.util.StringTokenizer;

    public class Main {
        public static void main(String[] args) {
            FastReader sc = new FastReader();
            MathUtils mathUtils = new MathUtils();
            ArrayUtils arrayUtils = new ArrayUtils();

            int t = sc.nextInt();
            for(int _i = 0; _i < t; _i++) {

            }
        }

        static class FastReader {
            /**
             * Uses BufferedReader and StringTokenizer for quick java I/O
             * get next int, long, double, string
             * get int, long, double, string arrays, both primitive and wrapped object when array contains all elements
             * on one line, and we know the array size (n)
             * next: gets next space separated item
             * nextLine: returns entire line as space
             */
            BufferedReader br;
            StringTokenizer st;

            public FastReader() {
                this.br = new BufferedReader(new InputStreamReader(System.in));
            }

            public String next() {
                while (st == null || !st.hasMoreElements()) {
                    try {
                        st = new StringTokenizer(br.readLine());
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
                return st.nextToken();
            }

            public String nextLine() {
                String str = "";
                try {
                    str = br.readLine();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                return str;
            }

            public String[] readStringArrayLine(int n) {
                String line = "";
                try {
                    line = br.readLine();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                return line.split(" ");
            }

            public String[] readStringArrayLines(int n) {
                String[] result = new String[n];
                for (int i = 0; i < n; i++) {
                    result[i] = this.next();
                }
                return result;
            }

            // to parse something else:
            // T x = T.parseT(fastReader.next());
            public int nextInt() {
                return Integer.parseInt(next());
            }

            public int[] readIntArray(int n) {
                int[] result = new int[n];
                for (int i = 0; i < n; i++) {
                    result[i] = this.nextInt();
                }
                return result;
            }

            public Integer[] readIntArrayObject(int n) {
                Integer[] result = new Integer[n];
                for (int i = 0; i < n; i++) {
                    result[i] = this.nextInt();
                }
                return result;
            }

            public long nextLong() {
                return Long.parseLong(next());
            }

            public char[] readCharArray(int n) {
                return this.nextLine().toCharArray();
            }

        }

        static class MathUtils {
            public MathUtils() {
            }

            public long gcdLong(long a, long b)
            {
                if(a%b==0)
                    return b;
                else
                    return gcdLong(b,a%b);
            }

            public long lcmLong(long a, long b) {
                return a * b / gcdLong(a, b);
            }
        }

        static class ArrayUtils {
            public ArrayUtils() {
            }

            public static int[] reverse(int[] a)
            {
                int n = a.length;
                int[] b = new int[n];
                int j = n;
                for (int i = 0; i < n; i++) {
                    b[j - 1] = a[i];
                    j = j - 1;
                }

                return b;
            }

            public int sumArray(int[] a) {
                int ans = 0;
                for (int i = 0; i < a.length; i++) {
                    ans += a[i];
                }

                return ans;
            }
        }
    }
  learner_created: false
- name: testData/1/latest_output.txt
  visible: true
  learner_created: true
feedback_link: https://codeforces.com/contest/1698/problem/C?locale=en
status: Unchecked
feedback:
  time: Tue, 28 Jun 2022 16:43:44 UTC
